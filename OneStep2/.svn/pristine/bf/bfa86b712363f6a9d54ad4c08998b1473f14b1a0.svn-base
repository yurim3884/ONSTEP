package kr.or.ddit.profile.controller;

import java.io.FileInputStream;
import java.io.InputStream;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.common.MediaUtils;
import kr.or.ddit.common.UploadFileUtils;
import kr.or.ddit.member.vo.MemberVO;
import kr.or.ddit.profile.service.IProfileService;
import kr.or.ddit.profile.vo.ProfileVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/user")
public class ProfileController {
	
	
	@Autowired
	private IProfileService proService;
	
	private String uploadPath = "D:/A_TeachingMaterial/08_Framework/03.SPRING2/workspace_spring2/OneStep/src/main/webapp/resources/images/profile";
	
	private String filePath;

	// 올리면 경로에 저장
	@ResponseBody
	@RequestMapping(value="/uploadAjax",method=RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> uploadAjax(MultipartFile file, HttpSession session) throws Exception {
	
		String savedName = UploadFileUtils.uploadFile(uploadPath, file.getOriginalFilename(),file.getBytes());
		
		// /2023/04/07/8d757d23-989a-4f09-9022-b57752651c88_Screenshot_20190409-211102_T world.jpg
		int idx = savedName.lastIndexOf("/");
		filePath = savedName.substring(0, idx + 1);
		savedName = savedName.substring(idx + 1);
		
		ProfileVO profile = new ProfileVO();
		
		profile.setProfileFn(file.getOriginalFilename());
		profile.setProfileName(savedName);
		profile.setProfilePath(filePath);
		
		
		log.info("getProfileFn>>>" + profile.getProfileFn());
		log.info("getProfileName >>>" + profile.getProfileName());
		log.info("getProfilePath >> " + profile.getProfilePath());
		
		MemberVO memberVO = (MemberVO) session.getAttribute("memInfo");
		String data = filePath+savedName;
		return new ResponseEntity<String>(data, HttpStatus.CREATED);
	}

	// 보여주는 ajax
	@RequestMapping(value="/displayFile", method = RequestMethod.GET)
	public ResponseEntity<byte[]> display(String fileName) throws Exception {
		InputStream in = null;
		ResponseEntity<byte[]> entity = null;

		log.info("fileName : " + fileName);

		try {
			String formatName = fileName.substring(fileName.lastIndexOf(".")+1); // 확장자 추출
			MediaType mType = MediaUtils.getMediaType(formatName);
			HttpHeaders headers = new HttpHeaders();
			in = new FileInputStream(uploadPath + fileName);
			log.info("in >>" , in);
			if(mType != null) {
				headers.setContentType(mType);
			} else {
				fileName = fileName.substring(fileName.indexOf("_") + 1);
				headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
				headers.add("Content-Disposition", "attachment; filename=\""
						+new String(fileName.getBytes("UTF-8"),"ISO-8859-1") + "\"");
			}

			entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in),headers,HttpStatus.CREATED);
		} catch(Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<byte[]>(HttpStatus.BAD_REQUEST);
		} finally {
			in.close();
		}
		return entity;
	}
}
