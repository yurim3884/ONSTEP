package kr.or.ddit.board.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.View;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.board.service.IBoardService;
import kr.or.ddit.board.vo.BoardVO;
import kr.or.ddit.comment.vo.CommentVO;
import kr.or.ddit.member.vo.MemberVO;
import kr.or.ddit.vo.AttVO;
import kr.or.ddit.vo.PaginationInfoVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/board")
public class BoardController {
	
	@Inject
	private IBoardService boardService;
	
//리스트	
	@RequestMapping(value="/list/{boardCategory}", method=RequestMethod.GET)
	public String boardList(
			@RequestParam(name="page", required=false, defaultValue = "1") int currentPage,
			@RequestParam(required=false, defaultValue = "title") String searchType,
			@RequestParam(required=false) String searchWord,
			@PathVariable int boardCategory,
			Model model) {
		
		BoardVO boardVO = new BoardVO();
		PaginationInfoVO<BoardVO> pagingVO = new PaginationInfoVO<BoardVO>();
		
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchWord", searchWord);
			model.addAttribute("searchWord", searchType);
		}
		
		boardVO.setBoardCategory(boardCategory);
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = boardService.selectBoardCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		List<BoardVO> boardList = boardService.selectBoardList(pagingVO);
		pagingVO.setDataList(boardList);
		
		model.addAttribute("boardVO",boardVO);
		model.addAttribute("pagingVO",pagingVO);
		log.info("나오냐?" + model);
		return "board/list"+boardCategory;
	}
	
	@RequestMapping(value="/form/{boardCategory}", method=RequestMethod.GET)
	public String boardForm(@PathVariable int boardCategory) {
		return "board/register";
		
	}

//등록	
	@RequestMapping(value="/insert/{boardCategory}", method= RequestMethod.POST)
	public String boardInsert(
			HttpServletRequest req,
			BoardVO boardVO,
			@PathVariable int boardCategory,
			Model model){
		String goPage = "";
		HttpSession session = req.getSession();
//로그인할떄 세션값을 유지하려고 했는데 이미 있었다. 
		MemberVO memberVO = (MemberVO) session.getAttribute("memberVO");
		boardVO.setBoardCategory(boardCategory);
		model.addAttribute("boardVO", boardVO);
		System.out.println(("넒어와지나? memberVO : " + memberVO));
//		System.out.println("야야야야야야야" + AttVO);
		log.info("session : " + session);
		if(memberVO!=null) {
			boardVO.setMemId(memberVO.getMemId());
			ServiceResult result = boardService.insertBoard(req, boardVO);
			if(result.equals(ServiceResult.OK)) {
				goPage="redirect:/board/list/{boardCategory}";
			}else {
				goPage = "board/register/{boardCategory}";
			}
			
		}else {
			goPage = "redirect:/member/login";
		}
		
		return goPage;
	}

	
//상세	
	@RequestMapping(value="/read",method=RequestMethod.GET)
	public String boardDetail(int boardId, Model model) {
		BoardVO boardVO = boardService.selectBoard(boardId);
//		List<CommentVO> commentVO = boardService.selectCommentList(boardId); 
		model.addAttribute("board", boardVO);
//		model.addAttribute("list",commentVO);
		return "board/read2";
	}
	
	
//수정
	@RequestMapping(value="/update", method=RequestMethod.GET)
	public String boardUpdate(int boardId, Model model) {
		BoardVO boardVO = boardService.selectBoard(boardId);
		model.addAttribute("boardVO",boardVO);
		model.addAttribute("status","u");
		
		return "board/register";
	}
	
	@RequestMapping(value="/update.do",method=RequestMethod.POST)
	public String boardUpdatDO(
			HttpServletRequest req,
			BoardVO boardVO, Model model) {
		String goPage = "";
		ServiceResult result = boardService.updateBoard(req, boardVO);
//		MemberVO memberVO = session.getAttribute("memberVO");
		if(result.equals(ServiceResult.OK)) {
			goPage = "redirect:/board/read?boardId="+boardVO.getBoardId();
		}else {
			model.addAttribute("message", "수정에 실패했습니다.");
			model.addAttribute("boardVO", boardVO);
			model.addAttribute("status","u");
			goPage="board/register";
		}
		return goPage;
	}
	
//삭제	
	@RequestMapping(value="/delete/{boardCategory}",method=RequestMethod.POST)
	public String boardDelete(
			HttpServletRequest req,
			@PathVariable int boardCategory,
			int boardId, Model model) {
		String goPage ="";
		ServiceResult result = boardService.deleteBoard(req,boardId);
		if(result.equals(ServiceResult.OK)) {
			goPage = "redirect:/board/list/{boardCategory}";
		}else {
			goPage = "redirect:/board/read?boardId="+boardId;
		}
		return goPage;
		
	}
	
	
//파일 다운로드 
	@RequestMapping(value="/download")
	public View boardDownload(
			int attId, Model model) {
		AttVO attVO = boardService.boardDownload(attId);
		Map<String, Object> boardFileMap = new HashMap<String, Object>();
		boardFileMap.put("fileName", attVO.getAttFileName());
		boardFileMap.put("fileSize", attVO.getAttFileSize());
		boardFileMap.put("fileSavepath",attVO.getAttPath());
		model.addAttribute("boardFileMap",boardFileMap);
		
		return new BoardDownloadView();
	}
	
	
	
	
	
	
	// 모댓글 작성
		@ResponseBody
		@RequestMapping(value = "/picture_write_reply.do")
		public BoardVO write_reply(@RequestParam int commId, @RequestParam String commContent, HttpSession session) {

			CommentVO to = new CommentVO();

		    // 게시물 번호 세팅
		    to.setBoardId(commId);

		    // 댓글 내용 세팅
		    to.setCommContent(commContent);

		    // 댓글작성자 nick을 writer로 세팅
		    to.setCommMem((String) session.getAttribute("memberVO"));

		    // +1된 댓글 갯수를 담아오기 위함
		    BoardVO boardVO = boardService.boardWriteComment(to);

		    return boardVO;
		}

		// 답글 작성
		@ResponseBody
		@RequestMapping(value = "/picture_write_rereply.do")
		public BoardVO write_rereply(@RequestParam int commId, @RequestParam String bno, @RequestParam String commContent,
		        HttpSession session) {

		    CommentVO to = new CommentVO();

		    // 게시물 번호 세팅
		    to.setBoardId(commId);

		    // grp, grps, grpl 은 CommentVO에 int로 정의되어 있기 때문에 String인 no를 int로 변환해서 넣어준다.
		    // 모댓글 번호 no를 grp으로 세팅한다.
		    to.setGrp(commId);

		    // 답글은 깊이가 1이되어야 하므로 grpl을 1로 세팅한다.
		    to.setGrpl(1);

		    // 답글 내용 세팅
		    to.setCommContent(commContent);

		    // 답글작성자 nick을 writer로 세팅
		    to.setCommMem((String) session.getAttribute("memberVO"));

		    // +1된 댓글 갯수를 담아오기 위함
		    BoardVO boardVO = boardService.boardWriteReComment(to);

		    return boardVO;
		}

		// 댓글 리스트
		@ResponseBody
		@RequestMapping(value = "/picture_replyList.do")
		public List<CommentVO> reply_list(@RequestParam int commId, HttpSession session) {

		    CommentVO to = new CommentVO();

		    // 가져올 댓글 리스트의 게시물번호를 세팅
		    to.setBoardId(commId);

		    List<CommentVO> replyList = new ArrayList<CommentVO>();

		    replyList = boardService.commentList(to);

		    return replyList;
		}

		// 모댓글 삭제
		@ResponseBody
		@RequestMapping(value = "/picture_delete_reply.do")
		public BoardVO picture_delete_reply(@RequestParam int commId, @RequestParam int boardId ) {

		    CommentVO to = new CommentVO();

		    // 모댓글 번호 세팅
		    to.setCommId(commId);

		    // 게시물 번호 세팅
		    to.setBoardId(boardId);

		    // 갱신된 댓글 갯수를 담아오기 위함
		    BoardVO boardVO = boardService.boardDeleteComment(to);

		    return boardVO;
		}

		// 답글 삭제
		@ResponseBody
		@RequestMapping(value = "/picture_delete_rereply.do")
		public BoardVO delete_rereply(@RequestParam int commId, @RequestParam int boardId, @RequestParam int grp) {

		    CommentVO to = new CommentVO();

		    // 답글 번호 세팅 - 답글 삭제하기 위해서 필요함
		    to.setCommId(commId);

		    // 게시물 번호 세팅 - p_board 의 reply+1하기 위해 필요함
		    to.setBoardId(boardId);

		    // grp 세팅(모댓글이 뭔지) - 모댓글은 삭제를 해도 답글이 있으면 남아있게 되는데 답글이 모두 삭제되었을 때 모댓글도 삭제하기 위해
		    // 필요함
		    to.setGrp(grp);

		    // 갱신된 댓글 갯수를 담아오기 위함
		    BoardVO boardVO = boardService.boardDeleteReComment(to);

		    return boardVO;
		}	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}


























































































































