package kr.or.ddit.myPage.controller;

import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


import kr.or.ddit.ServiceResult;
import kr.or.ddit.myPage.service.IMypageService;
import kr.or.ddit.myPage.vo.NotificationVO;
import kr.or.ddit.myPage.vo.ResumeVO;
import kr.or.ddit.vo.PaginationInfoVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/myPage")
public class MyPageController {
	
	@Inject
	private IMypageService mypageService;
	
	@RequestMapping("/main")
	public String main() {
		return "myPage/myPageMain";
	}
	
	@RequestMapping("/memInfo")
	public String memInfo() {
		return "myPage/memInfo";
	}
	
	@RequestMapping(value = "/notification/list", method = RequestMethod.GET)
	public String notificationList(
			@RequestParam(name="page", required=false, defaultValue="1") int currentPage, Model model) {
		
		PaginationInfoVO<NotificationVO> pagingVO = new PaginationInfoVO<NotificationVO>();
		
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = mypageService.selectNotificationCount(pagingVO);		// 총 게시글 수 얻어 옴
		pagingVO.setTotalRecord(totalRecord);
		
		List<NotificationVO> notificationList = mypageService.selectNotificationList(pagingVO);		// 위에서 만들어진 pagingVO를 다시 list쪽에 넘겨 줌 
		pagingVO.setDataList(notificationList);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "myPage/notification";
	}
	
	@RequestMapping(value="/notification/delete", method=RequestMethod.POST)
	public String notificationDelete(int notificationId, Model model) {
		String goPage = "";
		ServiceResult result = mypageService.deleteNotification(notificationId);
		
		if (result.equals(ServiceResult.OK)) {
			goPage = "redirect:/myPage/notification/list";
			
		} else {
			goPage = "myPage/notification/list";
		}
		return goPage;
	}

	@RequestMapping(value="/resume/list", method=RequestMethod.GET)
	public String resumeList(
			@RequestParam(name="page", required=false, defaultValue = "1") int currentPage, 
			@RequestParam(required=false, defaultValue="title") String searchType,
			@RequestParam(required=false) String searchWord,
			Model model) {
		
		PaginationInfoVO<ResumeVO> pagingVO = new PaginationInfoVO<ResumeVO>();
		
		if (StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchType(searchType);
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}

		pagingVO.setCurrentPage(currentPage);
		int totalRecord = mypageService.selectResumeCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		
		List<ResumeVO> resumeList = mypageService.selectResumeList(pagingVO);
		pagingVO.setDataList(resumeList);
		
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("list", resumeList);
		
		return "myPage/resumeList";
	}

	@RequestMapping(value="/resume/insert", method=RequestMethod.GET)
	public String resumeInsertForm(Model model, ResumeVO resume) {
		model.addAttribute("resume", resume);
		return "myPage/resumeInsert";
	}
	
	@RequestMapping(value="/resume/insert", method=RequestMethod.POST)
	public String resumeInsert(Model model, ResumeVO resume) {
		mypageService.insertResume(resume);
		return "redirect:/myPage/resume/detail?resumeId=" + resume.getResumeId();
	}
	
	@RequestMapping(value="/resume/detail", method=RequestMethod.GET)
	public String resumeDetail(String resumeId, Model model) {
		ResumeVO resume = mypageService.detail(resumeId);
		model.addAttribute("resume", resume);
		return "myPage/resumeDetail";
	}
	
	@RequestMapping(value="/resume/modify", method=RequestMethod.GET)
	public String resumeModify(String resumeId, Model model) {
		ResumeVO resume = mypageService.detail(resumeId);
		model.addAttribute("resume", resume);
		model.addAttribute("status", "u");
		return "myPage/resumeInsert";
	}
	
	@RequestMapping(value="/modify", method=RequestMethod.POST)
	public String resumeModify(ResumeVO resume, Model model) {
		mypageService.modify(resume);
		return "redirect:/myPage/resume/detail?resumeId=" + resume.getResumeId();
	}
	
	@RequestMapping("/resume/items")
	public String resumeItems() {
		return "myPage/resumeItems";
	}
	@RequestMapping("/coverletter/list")
	public String coverletterList() {
		return "myPage/coverletterList";
	}
	
	@RequestMapping("/coverletter/insert")
	public String coverletterInsert() {
		return "myPage/coverletterInsert";
	}
	
	@RequestMapping("/coverletter/items")
	public String coverletterItems() {
		return "myPage/coverletterItems";
	}
}
