package kr.or.ddit.member.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.inject.Inject;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.http.Consts;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.company.service.ICompanyService;
import kr.or.ddit.company.vo.CompanyVO;
import kr.or.ddit.member.service.IMemService;
import kr.or.ddit.member.vo.MemberVO;
import kr.or.ddit.vo.AnnoVO;
import kr.or.ddit.vo.MailVO;
import kr.or.ddit.vo.ReviewVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/member")
public class MemberController { // 일반회원가입페이지로이동

	// 메일전송
	@Autowired
	private JavaMailSenderImpl mailSender;
	// Service연결
	@Inject
	private IMemService memService;
	@Inject
	private ICompanyService comService; 

	// 일반회원가입
	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public String join() {

		return "loginjoin/join";
	}

	// 기업회원가입
	@RequestMapping(value = "/companyjoin", method = RequestMethod.GET)
	public String companyjoin() {

		return "loginjoin/companyjoin";
	}

	// 로그인페이지
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String loginPage(Model model) {
		return "loginjoin/login";
	}

	// 인증메일 전송
	@RequestMapping(value = "/sendJoin", produces = "text/plain; charset=utf-8")
	@ResponseBody
	public ResponseEntity<String> sendjoinMail(@RequestBody MailVO mvo, HttpSession session) throws Exception {
		Random random = new Random();

		int ranNum = random.nextInt(100000);

		session.setAttribute("ranNum", ranNum);
		session.setMaxInactiveInterval(300);

		String from = "ehdgur534@gmail.com";

		try {
			MimeMessage mail = mailSender.createMimeMessage();

			MimeMessageHelper mailHelper = new MimeMessageHelper(mail, "UTF-8");

			mailHelper.setFrom(from);
			// 빈에 아이디 설정한 것은 단순히 smtp 인증을 받기 위해 사용 따라서 보내는이(setFrom())반드시 필요
			// 보내는이와 메일주소를 수신하는이가 볼때 모두 표기 되게 원하신다면 아래의 코드를 사용하시면 됩니다.
			// mailHelper.setFrom("보내는이 이름 <보내는이 아이디@도메인주소>");
			mailHelper.setTo(mvo.getTo());
			mailHelper.setSubject("인증번호입니다");
			mailHelper.setText("회원가입 인증번호는 " + ranNum + "입니다", true);
			// true는 html을 사용하겠다는 의미입니다.

			/*
			 * 단순한 텍스트만 사용하신다면 다음의 코드를 사용하셔도 됩니다. mailHelper.setText(content);
			 */

			mailSender.send(mail);

		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<String>("FAILED", HttpStatus.OK);
		}

		return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	}

	@RequestMapping(value = "/numberCheck", produces = "text/plain; charset=utf-8")
	@ResponseBody
	public ResponseEntity<String> numCheck(@RequestBody MailVO mvo, HttpSession session) throws Exception {
		int ranNum;
		System.out.println(mvo.getJoinNum());
		if (session.getAttribute("ranNum") != null) {
			ranNum = (int) session.getAttribute("ranNum");
		} else {
			ranNum = 0;
		}

		if (mvo.getJoinNum().equals(String.valueOf(ranNum))) {

			return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("FAILED", HttpStatus.OK);
		}

	}

	// 일반회원 회원가입 DB연동
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public String joinGo(MemberVO vo,RedirectAttributes rttr) {

		System.out.println(vo);
		vo.setMemTel(vo.getMemTel().replaceAll(",", ""));
		int cnt = memService.join(vo);
		System.out.println(cnt);
		rttr.addFlashAttribute("msg", "회원가입 성공!");
		return "redirect:/member/login";
	}

	// 기업회원 회원가입 DB연동
	@RequestMapping(value = "/companyjoin", method = RequestMethod.POST)
	public String companyjoinGo(MemberVO vo,RedirectAttributes rttr) {

		System.out.println(vo);
		vo.setMemTel(vo.getMemTel().replaceAll(",", ""));
		int cnt = memService.companyJoin(vo);
		System.out.println(cnt);
		rttr.addFlashAttribute("msg", "회원가입 성공!");
		return "redirect:/member/login";
	}

	// 비동기 ID중복확인
	@RequestMapping(value = "/memCheck", method = RequestMethod.GET)
	public ResponseEntity<String> memCheck(String memId) {

		System.out.println("멤버아이디: " + memId);
		MemberVO vo = memService.memCheck(memId);
		if (vo == null) {
			return new ResponseEntity<String>("FAILED", HttpStatus.OK);

		}
		return new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String loginGo(MemberVO vo, RedirectAttributes rttr, HttpServletRequest req ,Model model) {

		System.out.println("넘어온값" + vo);
		MemberVO vo2 = memService.memCheck(vo.getMemId());
		System.out.println("조회값" + vo2);
		if (vo2 == null) {
			rttr.addFlashAttribute("msg", "해당 ID를 찾을수 없습니다.");
			
			return "redirect:/member/login";
		} else {
			if (vo.getMemPw().equals(vo2.getMemPw())) {
				HttpSession session = req.getSession();
				session.setAttribute("memberVO", vo2);
				
				
				
				
				
				rttr.addFlashAttribute("msg", "로그인 성공");
				if(vo2.getMemStatus().equals("1")) {
					return "redirect:/member/main";
				}else if(vo2.getMemStatus().equals("2")) {
					return "redirect:/company/main";
				}else if(vo2.getMemStatus().equals("3")) {
					return "redirect:/manager/main";
				}else {
					return "redirect:/member/login";
				}
				
			} else {
				rttr.addFlashAttribute("msg", "비밀번호가 틀렸습니다.");
				return "redirect:/member/login";
			}

		}

	}

	// 카카오톡 로그인 컨트롤러
	@RequestMapping(value = "kakao", method = RequestMethod.GET)
	public String kakao(@RequestParam String code, Model model, HttpServletRequest req) throws Exception {

		System.out.println(code);

		HttpPost httpPost = new HttpPost("https://kauth.kakao.com/oauth/token");
		httpPost.addHeader("Content-Type","application/x-www-form-urlencoded");

		List<NameValuePair> nameValuePairs = new ArrayList<>();
		nameValuePairs.add(new BasicNameValuePair("grant_type", "authorization_code"));
		nameValuePairs.add(new BasicNameValuePair("client_id", "302f45b1d45faa5060f5c8aaa0f81418"));
		nameValuePairs.add(new BasicNameValuePair("redirect_uri", "http://localhost/member/kakao"));
		nameValuePairs.add(new BasicNameValuePair("code", code));
		httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs, Consts.UTF_8));

		HttpClient httpClient = HttpClientBuilder.create().build();
		HttpResponse response = httpClient.execute(httpPost);
		String body = EntityUtils.toString(response.getEntity());
		
		System.out.println(body);
		
		JSONParser parser = new JSONParser();
        JSONObject jsonObject = (JSONObject) parser.parse(body);
        
        System.out.println("인증키 :" +jsonObject.get("access_token"));
        
		HttpClient client = HttpClientBuilder.create().build(); // HttpClient 생성
        HttpPost postRequest = new HttpPost("https://kapi.kakao.com/v2/user/me"); //POST 메소드 URL 새성 
        postRequest.setHeader("Authorization","Bearer "+(String)jsonObject.get("access_token"));
        //postRequest.addHeader("Authorization", token); // token 이용시


        response = client.execute(postRequest);

        //Response 출력
        if (response.getStatusLine().getStatusCode() == 200) {
            ResponseHandler<String> handler = new BasicResponseHandler();
            body = handler.handleResponse(response);
            System.out.println("사용자정보 :" + body);
            jsonObject = (JSONObject) parser.parse(body);
            System.out.println("JSON :" + jsonObject.get("id"));
        } else {
            System.out.println("response is error : " + response.getStatusLine().getStatusCode());
        }
        
        String id=jsonObject.get("id").toString();
        
        MemberVO vo = memService.memCheck(id);
        if(vo!=null) {
        	HttpSession session = req.getSession();
			session.setAttribute("memberVO", vo);
			
        	return "member/main";	
        }
       
        
        
        model.addAttribute("kakaoInfo", jsonObject);
		return "loginjoin/kakaojoin";
		
	}
	
	
	//아이디 비밀번호 찾기
	
	@RequestMapping(value = "/forget", method = RequestMethod.GET)
	public String forget() {
		
		return "loginjoin/forget";
	}
	
	
	//아이디찾기
	@RequestMapping(value = "/idForget", method = RequestMethod.GET)
	public ResponseEntity<String> idForget(String memName,String memEmail){
		
		MemberVO vo = new MemberVO();
		vo.setMemName(memName);
		vo.setMemEmail(memEmail);
		MemberVO vo2 = memService.idForget(vo);
		System.out.println(vo2);
		if(vo2!=null) {
			
			String name =vo2.getMemId();
			return new ResponseEntity<String>(name,HttpStatus.OK);
		}
		return new ResponseEntity<String>("FAILED",HttpStatus.OK);
	}
	
	
	//비밀번호찾기
		@RequestMapping(value = "/pwForget", method = RequestMethod.GET)
		public ResponseEntity<String> pwForget(String memId,String memEmail){
			
			MemberVO vo = new MemberVO();
			vo.setMemId(memId);
			vo.setMemEmail(memEmail);
			System.out.println(vo);
			MemberVO vo2 = memService.pwForget(vo);
			System.out.println(vo2);
			if(vo2!=null) {
				
				Random random = new Random();

				int ranNum = random.nextInt(100000);


				String from = "ehdgur534@gmail.com";

				try {
					MimeMessage mail = mailSender.createMimeMessage();

					MimeMessageHelper mailHelper = new MimeMessageHelper(mail, "UTF-8");

					mailHelper.setFrom(from);
					// 빈에 아이디 설정한 것은 단순히 smtp 인증을 받기 위해 사용 따라서 보내는이(setFrom())반드시 필요
					// 보내는이와 메일주소를 수신하는이가 볼때 모두 표기 되게 원하신다면 아래의 코드를 사용하시면 됩니다.
					// mailHelper.setFrom("보내는이 이름 <보내는이 아이디@도메인주소>");
					mailHelper.setTo(memEmail);
					mailHelper.setSubject("임시비밀번호입니다");
					mailHelper.setText("회원가입 임시비밀번호는 " +"a"+ ranNum + "입니다", true);
					// true는 html을 사용하겠다는 의미입니다.

					/*
					 * 단순한 텍스트만 사용하신다면 다음의 코드를 사용하셔도 됩니다. mailHelper.setText(content);
					 */

					mailSender.send(mail);
					vo2.setMemPw("a"+ranNum);
					memService.changePw(vo2);
					return new ResponseEntity<String>("SUCCESS",HttpStatus.OK);
				}catch (Exception e) {
					e.printStackTrace();
					return new ResponseEntity<String>("MAILFAILED", HttpStatus.OK);
				}
			}
			return new ResponseEntity<String>("FAILED",HttpStatus.OK);
		}
		
		//회원정보 수정
		@RequestMapping(value = "/updateInfo", method = RequestMethod.POST)
		public String updateInfo(MemberVO vo,RedirectAttributes rttr,HttpServletRequest req) {
			System.out.println(vo);
			
			memService.changeInfo(vo);
			rttr.addFlashAttribute("msg", "회원정보수정을 완료했습니다.");
			HttpSession session = req.getSession();
			MemberVO vo2 = memService.memCheck(vo.getMemId());
			session.setAttribute("memberVO", vo2);
			return "redirect:/myPage/memInfo";
		}
		
		//비밀번호 변경
		@RequestMapping(value = "/changePw", method = RequestMethod.GET)
		public ResponseEntity<String> pwChange(String memId,String beforePw,String afterPw) {
			
			System.out.println(memId);
			System.out.println(beforePw);
			System.out.println(afterPw);
			
			MemberVO vo = memService.memCheck(memId);
			if(beforePw.equals(vo.getMemPw())) {
				vo.setMemPw(afterPw);
				memService.changePw(vo);
				return new ResponseEntity<String>("SUCCESS",HttpStatus.OK);
				
			}
			
			return new ResponseEntity<String>("FAILED",HttpStatus.OK);
			
		}
		
		//기업비교
		
		@GetMapping("/companyCompare")
		public String companyCompare() {
			
			return "member/companyCompare";
		}
		
		//리뷰등록
		@GetMapping("reviewInsert/{companyId}")
		public String reviewInsert(@PathVariable("companyId") String companyId, Model model) {
			CompanyVO vo = comService.getCompany(companyId);
			List<AnnoVO> annoVo = comService.selectAnno(Integer.parseInt(companyId));
			model.addAttribute("companyVO", vo);
			model.addAttribute("annoVO", annoVo);
			
			System.out.println(companyId);
			return "member/reviewInsert";
		}
		
		//리뷰등록
		@PostMapping("/reviewInsert")
		public String reviewInsertGo(ReviewVO vo) {
			System.out.println(vo);
			
			comService.insertReview(vo);
			
			   
			return "success";
		}
		
		//회사디테일
		@RequestMapping(value = "/detail/{companyId}",method = RequestMethod.GET)
		public String companyDetail(@PathVariable("companyId") String companyId,Model model) {
			
			CompanyVO vo = comService.getCompany(companyId);
			List<AnnoVO> annoVo = comService.selectAnno(Integer.parseInt(companyId));
			List<ReviewVO> reviewVO = comService.getReviewList(Integer.parseInt(companyId));
			model.addAttribute("companyVO", vo);
			model.addAttribute("annoVO", annoVo);
			model.addAttribute("reviewVO", reviewVO);
			
			return "member/detail";
		}
	
		
	
	
	
	
	
}
